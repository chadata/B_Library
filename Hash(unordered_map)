## unordered_map이란?

`std::unordered_map`은 C++ 표준 라이브러리의 해시 테이블 기반 연관 컨테이너 중 하나입니다. 이 컨테이너는 키-값 쌍을 보다 빠르게 저장하고 검색하는 데 사용됩니다. 기본적으로 해시 함수를 사용하여 입력된 키를 버킷으로 매핑하며, 버킷 내에 혹은 연결 리스트 범위 내에 많은 요소들이 포함될 수 있는 균형 잡힌 상태를 자동으로 유지하기 위해 협소적 평균 정리 방식으로 리해시를 수행합니다. 이 때 키 중복성을 허용하지 않으며, 각각의 키는 유일해야 합니다.

`std::unordered_map`은 배열보다 일반적으로 더 나은 성능을 가지며 다음과 같은 작업에 사용할 수 있습니다:
- 특정 키를 갖는 원소 검색/삭제
- 임의 원소 접근
- 첨자 연산자(`[]`)를 이용한 삽입/수정

이 컨테이너는 빠른 원소 찾기 속도를 보장하며, 키를 수정하지 않는 한 값의 변경(갱신 작업)은 일반적으로 빠릅니다. 그러나 제거 연산은 일반적인 경우보다 최악의 경우 선형 복잡도를 가질 수 있습니다.

## unordered_map 사용 예제

아래는 `std::unordered_map`을 사용한 예제 코드입니다.

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    // 키를 문자열, 값을 정수로 갖는 unordered_map 생성
    std::unordered_map<std::string, int> my_map;

    // 과일과 가격을 매핑하여 저장
    my_map["apple"] = 2;
    my_map["banana"] = 3;
    my_map["orange"] = 1;

    // 키를 이용하여 값을 검색하고 출력
    std::cout << "The cost of apple is " << my_map["apple"] << " dollars\n";

    return 0;
}
```

## 다른 C++ 표준 라이브러리의 해시 테이블 기반 연관 컨테이너

C++ 표준 라이브러리에는 해시 테이블 기반 연관 컨테이너로 두 가지 주요 데이터 구조가 있습니다.

1. `std::unordered_map`: 빠른 검색, 삽입 및 삭제 성능을 제공하는 해시 기반 키-값 쌍 컨테이너로서, 키를 기반으로 값을 빠르게 조회할 수 있습니다. 키는 고유해야 하며, 중복된 키를 가진 데이터를 저장할 수 없습니다.

2. `std::unordered_set`: 빠른 검색, 삽입 및 삭제 성능을 제공하는 해시 기반 키 컨테이너로서, 특정 값의 존재를 확인할 수 있습니다. 값은 고유해야 하며, 중복된 값을 가진 데이터를 저장할 수 없습니다.

이외에도 `std::unordered_multimap`과 `std::unordered_multiset`이 있으며, 이들은 중복된 키(값)을 허용합니다.

이러한 해시 기반 데이터 구조들은 해시 함수를 사용하여 요소를 적절한 버킷에 매핑하고, 이를 통해 요소를 빠르게 검색할 수 있습니다. 그러나 최악의 경우에는 선형 시간 복잡도를 가질 수 있으므로 유의해야 합니다.

## 사용법

`std::unordered_map`과 관련된 다양한 멤버 함수를 사용하여 컨테이너를 조작하고 작업을 수행할 수 있습니다. 자세한 정보와 사용 예제는 C++ STL 관련 문서 및 자료에서 확인할 수 있습니다.

**예제:**

- `insert()`: 키-값 쌍을 삽입합니다.
- `erase()`: 주어진 키를 가진 요소를 삭제합니다.
- `find()`: 주어진 키를 가진 요소를 찾습니다.
- `size()`: 컨테이너에 저장된 요소 수를 반환합니다.

위와 같은 함수들을 이용하여 `std::unordered_map`을 원하는 방식으로 활용할 수 있습니다. 이 컨테이너를 활용하면 빠른 원소 검색과 삽입을 가능하게 하며, 키를 기반으로 값을 빠르게 조회하는데 유용합니다.
